import streamlit as st
from streamlit_navigation_bar import st_navbar
from utils.connect import create_credentials
from utils.page_functions import (
    set_sidebar,
    add_package_form,
    delete_package_form,
    add_admin,
    add_doctor,
    delete_doctor_form,
    delete_admin_form,
)
from utils.connect import get_data
from utils.crud import find_accountEmail, update_flag, update_use
import time
import pandas as pd

if "ID" not in st.session_state:
    time.sleep(1)
    st.switch_page("main.py")

st.set_page_config(page_title="Doctor AI", page_icon="üë®‚Äçüî¨", layout="wide")
navbar = st_navbar(
    ["Trang ch·ªß", "C·∫≠p nh·∫≠t", "ƒêƒÉng xu·∫•t"],
)
create_credentials()

payment = get_data("Payment")
package = get_data("Package")

if navbar == "Trang ch·ªß":
    try:
        st.title(f"Ch√†o m·ª´ng tr·ªü l·∫°i {find_accountEmail(st.session_state.ID)}.")
    except:
        st.title("Welcome back.")

    n = len(payment[payment["Flag"] == 0])
    if n != 0:
        st.warning(f"B·∫°n ƒëang c√≥ {n} ƒë∆°n h√†ng ch·ªù duy·ªát.")

    st.title("Tra c·ª©u th√¥ng tin")

    doctor = get_data("Doctor")
    doctor = doctor[doctor["Flag"] == 1]
    patient = get_data("Patient")
    patient["Phone"] = patient["Phone"].apply(lambda x: "0" + str(x))
    appointment = get_data("Appointment")
    account = get_data("Account")

    merged_appointment = appointment.merge(
        patient, how="left", left_on="PatientID", right_on="ID"
    ).merge(doctor, how="left", left_on="DoctorID", right_on="ID")

    merged_payment = payment.merge(
        patient, how="left", left_on="PatientID", right_on="ID"
    ).merge(package, how="left", left_on="PackageID", right_on="ID")

    successful_payment = merged_payment[merged_payment["Flag"] == 1]
    canceled_payment = merged_payment[merged_payment["Flag"] == -1]

    #### Package
    with st.container():
        st.header("G√≥i s·∫£n ph·∫©m.")
        st.dataframe(
            package[package["IsUsed"] == 1],
            width=700,
            column_config={
                "Name": "T√™n",
                "Price": "Gi√°",
                "Description": "M√¥ t·∫£ t√≠nh nƒÉng",
                "IsUsed": None,
            },
        )

    #### Patient
    with st.container():
        st.header("B·ªánh nh√¢n")
        st.dataframe(
            patient,
            column_config={
                "ID": "M√£ s·ªë",
                "Email": "Email",
                "Name": "T√™n",
                "Age": "Tu·ªïi",
                "Phone": "S·ªë ƒëi·ªán tho·∫°i",
                "Gender": "Gi·ªõi t√≠nh",
                "Image": "H√¨nh ·∫£nh",
            },
        )

    #### Doctor
    with st.container():
        st.header("B√°c sƒ©")
        st.dataframe(
            doctor,
            column_config={
                "ID": "M√£ s·ªë",
                "Name": "T√™n",
                "Title": "Ch·ª©c v·ª•",
                "Spectiality": "Chuy√™n ng√†nh",
                "Image": "H√¨nh ·∫£nh",
                "Availability": "Ng√†y kh√°m",
                "TimeSlots": "Th·ªùi gian kh√°m",
            },
        )

    #### Appointment
    with st.container():
        st.header("L·ªãch h·∫πn")
        st.dataframe(
            merged_appointment[
                [
                    "ID_x",
                    "PatientID",
                    "Name_x",
                    "DoctorID",
                    "Name_y",
                    "Time",
                    "Description",
                ]
            ],
            column_config={
                "ID_x": "M√£ cu·ªôc h·∫πn",
                "PatientID": "M√£ kh√°ch h√†ng",
                "Name_x": "T√™n kh√°ch h√†ng",
                "DoctorID": "M√£ b√°c sƒ©",
                "Name_y": "T√™n b√°c sƒ©",
                "Time": "Th·ªùi gian",
                "Description": "M√¥ t·∫£",
            },
        )

    #### Account
    with st.container():
        st.header("T√†i kho·∫£n")
        st.dataframe(
            account,
            column_config={
                "ID": "M√£ s·ªë",
                "Email": "Email",
                "Password": "M·∫≠t kh·∫©u",
                "Use": "Lo·∫°i t√†i kho·∫£n",
                "Role": "Vai tr√≤",
            },
        )

    #### Payment History
    with st.container():
        st.header("L·ªãch s·ª≠ thanh to√°n")
        if not successful_payment.empty:
            st.dataframe(
                successful_payment[
                    [
                        "ID_x",
                        "PatientID",
                        "Name_x",
                        "Email_x",
                        "PackageID",
                        "Name_y",
                        "Time",
                        "Link",
                    ]
                ],
                column_config={
                    "ID_x": "M√£ ƒë∆°n h√†ng",
                    "PatientID": "M√£ kh√°ch h√†ng",
                    "Email_x": "Email",
                    "Name_x": "T√™n kh√°ch h√†ng",
                    "PackageID": "M√£ g√≥i",
                    "Name_y": "T√™n g√≥i",
                    "Time": "Th·ªùi gian",
                    "Link": "H√¨nh ·∫£nh",
                },
            )
        else:
            st.info("Ch∆∞a c√≥ h√≥a ƒë∆°n ƒë√£ thanh to√°n")

    #### Canceled Payment
    with st.container():
        st.header("ƒê∆°n h√†ng ƒë√£ h·ªßy")
        if not canceled_payment.empty:
            st.dataframe(
                canceled_payment[
                    [
                        "ID_x",
                        "PatientID",
                        "Name_x",
                        "Email_x",
                        "PackageID",
                        "Name_y",
                        "Time",
                        "Link",
                    ]
                ],
                column_config={
                    "ID_x": "M√£ ƒë∆°n h√†ng",
                    "PatientID": "M√£ kh√°ch h√†ng",
                    "Email_x": "Email",
                    "Name_x": "T√™n kh√°ch h√†ng",
                    "PackageID": "M√£ g√≥i",
                    "Name_y": "T√™n g√≥i",
                    "Time": "Th·ªùi gian",
                    "Link": "H√¨nh ·∫£nh",
                },
            )
        else:
            st.info("Ch∆∞a c√≥ h√≥a ƒë∆°n ƒë√£ thanh to√°n")

elif navbar == "C·∫≠p nh·∫≠t":

    st.title("ƒê∆°n h√†ng ch·ªù duy·ªát")
    bill = payment[payment["Flag"] == 0]
    if not bill.empty:
        with st.container():
            col1, col2, col3, col4, col5, col6, col7, col8, col9 = st.columns(9)
            col1.write("M√£ ƒê∆°n h√†ng")

            col2.write("M√£ B·ªánh nh√¢n")

            col3.write("M√£ S·∫£n ph·∫©m")

            col4.write("Email")

            col5.write("Gi√°")

            col6.write("Th·ªùi gian")

            col7.write("Link ·∫£nh")

            for i, row in bill.iterrows():
                with st.container():
                    col1, col2, col3, col4, col5, col6, col7, col8, col9 = st.columns(9)

                    col1.write(row["ID"])

                    col2.write(row["PatientID"])

                    col3.write(row["PackageID"])

                    col4.write(row["Email"])

                    try:
                        price = (
                            package[package["ID"] == row["PackageID"]].iloc[0]["Price"]
                            + " VND"
                        )
                    except:
                        price = None

                    col5.write(price)

                    col6.write(row["Time"])

                    col7.write(row["Link"])

                    with col8:
                        acc_but = st.button("X√°c nh·∫≠n", key=row["ID"] + row["Time"])
                        if acc_but:
                            update_flag(row["ID"])
                            update_use(id=row["PatientID"], use=2)
                            time.sleep(1)
                            st.rerun()

                    with col9:
                        del_but = st.button(
                            "H·ªßy", key=row["ID"] + row["Time"] + row["Link"]
                        )
                        if del_but:
                            update_flag(row["ID"], flag=-1)
                            time.sleep(1)
                            st.rerun()
    else:
        st.info("Hi·ªán kh√¥ng c√≥ ƒë∆°n h√†ng ch·ªù duy·ªát")

    st.title("G√≥i s·∫£n ph·∫©m")  ## part 1

    if "form_state" not in st.session_state:
        st.session_state.form_state = False
    if st.button("Th√™m g√≥i m·ªõi") or st.session_state.form_state:
        st.session_state.form_state = True
        add_package_form()

    if "form2_state" not in st.session_state:
        st.session_state.form2_state = False
    if st.button("Ch·ªânh s·ª≠a", key="package") or st.session_state.form2_state:
        st.session_state.form2_state = True
        delete_package_form()

    st.title("Qu·∫£n tr·ªã vi√™n")  ## part 2

    if "form3_state" not in st.session_state:
        st.session_state.form3_state = False
    if st.button("Th√™m admin") or st.session_state.form3_state:
        st.session_state.form3_state = True
        add_admin()

    if "form5_state" not in st.session_state:
        st.session_state.form5_state = False
    if st.button("Ch·ªânh s·ª≠a", key="admin") or st.session_state.form5_state:
        st.session_state.form5_state = True
        delete_admin_form()

    st.title("B√°c sƒ©")  ## part 3

    if "form4_state" not in st.session_state:
        st.session_state.form4_state = False
    if st.button("Th√™m b√°c sƒ©") or st.session_state.form4_state:
        st.session_state.form4_state = True
        add_doctor()

    if "form6_state" not in st.session_state:
        st.session_state.form6_state = False
    if st.button("Ch·ªânh s·ª≠a", key="doctor") or st.session_state.form6_state:
        st.session_state.form6_state = True
        delete_doctor_form()

elif navbar == "ƒêƒÉng xu·∫•t":
    st.session_state.clear()
    st.switch_page("main.py")

set_sidebar()
